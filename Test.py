from pysat.pb import PBEnc
from pysat.solvers import Glucose3
from pysat.formula import IDPool
import math
import csv
from collections import defaultdict, deque


def get_var(name, *args):
    global var_manager
    key = (name,) + args
    if key not in var_map:
        var_map[key] = var_manager.id()
    return var_map[key]


def get_key(value):
    for key, val in var_map.items():
        if val == value:
            return key

def read_data(file_path):
    global T, graph, Na, Nr

    # Kh·ªüi t·∫°o l·∫°i c√°c bi·∫øn global
    T = {}
    graph = {}

    with open(file_path, 'r') as f:
        reader = csv.DictReader(f, delimiter='\t')

        # L·∫•y t√™n t·∫•t c·∫£ c√°c c·ªôt t·ª´ t·ªáp
        fieldnames = reader.fieldnames

        # T√¨m c√°c c·ªôt c√≥ t√™n b·∫Øt ƒë·∫ßu b·∫±ng 'Robot '
        robot_columns = [col for col in fieldnames if col.startswith('Robot ')]

        # T·ª± ƒë·ªông x√°c ƒë·ªãnh s·ªë l∆∞·ª£ng robot (Nr)
        Nr = len(robot_columns)

        for row in reader:
            try:
                task = int(row['Task']) - 1  # Ch·ªâ s·ªë 0-based
            except (ValueError, KeyError):
                print(f"L·ªói: Kh√¥ng t√¨m th·∫•y ho·∫∑c gi√° tr·ªã 'Task' kh√¥ng h·ª£p l·ªá ·ªü h√†ng: {row}")
                continue

            # X·ª≠ l√Ω c·ªôt 'Successor'
            successors_str = row.get('Successor', '').strip()
            successors = [int(s.strip()) - 1 for s in successors_str.split(',') if s.strip()]
            graph[task] = successors

            # Kh·ªüi t·∫°o danh s√°ch th·ªùi gian cho m·ªói robot
            T[task] = [0] * Nr

            # ƒê·ªçc d·ªØ li·ªáu cho t·ª´ng robot m·ªôt c√°ch linh ho·∫°t
            for i, robot_col in enumerate(robot_columns):
                try:
                    T[task][i] = int(row[robot_col])
                except (ValueError, KeyError):
                    print(
                        f"C·∫£nh b√°o: Gi√° tr·ªã '{robot_col}' kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu ·ªü Task {task + 1}. S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 0.")
                    T[task][i] = 0

    # C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng nhi·ªám v·ª• (Na)
    Na = len(T)

    print(f"ƒê·ªçc d·ªØ li·ªáu th√†nh c√¥ng! Tasks: {Na}, Robots: {Nr}")
    return

def print_solution(assignment):
    print("\n=== Task Assignment ===")
    station_runtime = [0 for _ in range(Nw)]
    for j in range(Na):
        s = assignment[j]['station']
        r = assignment[j]['robot']
        if s != -1 and r != -1:
            station_runtime[s] += T[j][r]
            print(f"Task {j + 1} ‚Üí Station {s + 1}, Robot {r + 1}")
        else:
            print(f"Task {j + 1} ‚Üí Assignment incomplete.")

    ct_result = max(station_runtime) if station_runtime else 0
    print(f"\nCycle Time (CT) Result: {ct_result}")


def get_solution(this_solution):
    assignment = defaultdict(lambda: {'station': -1, 'robot': -1, 'runtime': -1})
    solution = []

    for var in this_solution:
        key = get_key(var)
        if not key:
            continue
        if key[0] == 'X':
            j, s = key[1], key[2]
            assignment[j]['station'] = s
        elif key[0] == 'Y':
            s, r = key[1], key[2]
            for j in range(Na):
                if assignment[j]['station'] == s:
                    assignment[j]['robot'] = r
        elif key[0] == 'S':
            j, t = key[1], key[2]
            solution.append(-get_var('S', j, t))
    station_runtime = [0 for _ in range(Nw)]

    for j in range(Na):
        s = assignment[j]['station']
        r = assignment[j]['robot']
        if s != -1 and r != -1:
            time = T[j][r]
            station_runtime[s] += time

    return assignment, station_runtime, solution


def optimize_ct():
    global var_map, var_counter, clauses, CT, time_end, previous_solutions, var_manager, LB, UB, ip
    best_solution = None
    best_ct = float('inf')
    CT = int((LB + UB) / 2)
    ip = Pre_processing()

    print(f"üéØ T√¨m ki·∫øm nghi·ªám trong kho·∫£ng CT = [{LB}, {UB}]")

    left, right = LB, UB
    timeout_count = 0
    max_timeout = 5

    while left <= right and timeout_count < max_timeout:
        var_map = {}
        var_counter = 1
        var_manager = IDPool()
        clauses = []
        solver = Glucose3()

        time_end = [max(0, CT - min(T[j].values())) for j in range(Na)]
        generate_solver()

        for clause in clauses:
            solver.add_clause(clause)

        print(f"ƒêang gi·∫£i v·ªõi CT = {CT}...")
        if solver.solve():
            model = solver.get_model()
            this_solution = [var for var in model if var > 0]
            assignment, station_runtime, solution = get_solution(this_solution)
            actual_ct = max(station_runtime) if station_runtime else 0
            print_solution(assignment)

            if actual_ct <= CT and actual_ct < best_ct:
                best_ct = actual_ct
                best_solution = assignment
                previous_solutions.append(solution)
                print(f"‚úÖ T√¨m ƒë∆∞·ª£c nghi·ªám t·ªët h∆°n v·ªõi CT = {actual_ct}")
                print_solution(assignment)
                CT = actual_ct - 1
            else:
                CT -= 1
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y nghi·ªám cho CT = {CT}")
            break

    if timeout_count >= max_timeout:
        print(f"‚ö†Ô∏è D·ª´ng do qu√° nhi·ªÅu timeout li√™n ti·∫øp")

    if best_solution:
        print(f"\nüéâ NGHI·ªÜM T·ªêI ∆ØU CU·ªêI C√ôNG v·ªõi CT = {best_ct}")
        print_solution(best_solution)
    else:
        print("‚ùå Kh√¥ng t√¨m ƒë∆∞·ª£c nghi·ªám h·ª£p l·ªá.")
        print(f"Debug info:")
        print(f"- Tasks: {Na}, Stations: {Nw}, Robots: {Nr}")
        print(f"- LB: {LB}, UB: {UB}")
        print(f"- Min times: {Tjr_min_list[:5]}...")  # Show first 5
        print(f"- Total min time: {sum(Tjr_min_list)}")

        # Th·ª≠ v·ªõi CT r·∫•t l·ªõn ƒë·ªÉ ki·ªÉm tra
        print("\nüîç Th·ª≠ nghi·ªám v·ªõi CT = 1000 ƒë·ªÉ debug...")
        debug_test(1000)


def debug_test(test_ct):
    """H√†m debug ƒë·ªÉ ki·ªÉm tra constraints c√≥ kh·∫£ thi kh√¥ng"""
    global var_map, var_counter, clauses, CT, time_end, var_manager

    print(f"Ch·∫°y debug test v·ªõi CT = {test_ct}")

    var_map = {}
    var_counter = 1
    var_manager = IDPool()
    clauses = []
    solver = Glucose3()
    CT = test_ct

    time_end = [max(0, CT - min(T[j].values())) for j in range(Na)]

    # CH·ªà TH√äM C√ÅC R√ÄNG BU·ªòC C∆† B·∫¢N
    print("Adding basic constraints...")

    # (2) M·ªói c√¥ng vi·ªác ƒë∆∞·ª£c g√°n cho ƒë√∫ng m·ªôt tr·∫°m
    for j in range(Na):
        clauses.append([get_var('X', j, s) for s in range(Nw)])

    for j in range(Na):
        for s1 in range(Nw):
            for s2 in range(s1 + 1, Nw):
                clauses.append([-get_var('X', j, s1), -get_var('X', j, s2)])

    # (3) M·ªói tr·∫°m ƒë∆∞·ª£c g√°n cho ƒë√∫ng m·ªôt robot
    for s in range(Nw):
        clauses.append([get_var('Y', s, r) for r in range(Nr)])

    for s in range(Nw):
        for r1 in range(Nr):
            for r2 in range(r1 + 1, Nr):
                clauses.append([-get_var('Y', s, r1), -get_var('Y', s, r2)])

    print(f"Added {len(clauses)} basic clauses")

    for clause in clauses:
        solver.add_clause(clause)

    if solver.solve():
        print("‚úÖ Basic constraints are satisfiable!")
        model = solver.get_model()
        this_solution = [var for var in model if var > 0]
        assignment, station_runtime, solution = get_solution(this_solution)
        print_solution(assignment)
    else:
        print("‚ùå Even basic constraints are unsatisfiable!")


def generate_solver():
    global clauses, CT, time_end, ip, previous_solutions, var_manager
    # # answer:
    # # X assignments
    # clauses += [
    #     [get_var('X', 0, 0)], [get_var('X', 1, 0)], [get_var('X', 2, 0)], [get_var('X', 3, 0)],
    #     [get_var('X', 4, 1)], [get_var('X', 5, 1)], [get_var('X', 6, 1)], [get_var('X', 8, 1)],
    #     [get_var('X', 7, 2)], [get_var('X', 9, 2)], [get_var('X', 10, 2)]
    # ]

    # # Y assignments (unique per station)
    # clauses += [
    #     [get_var('Y', 0, 3)],  # Station 1 ‚Üí Robot 4
    #     [get_var('Y', 1, 3)],  # Station 2 ‚Üí Robot 4
    #     [get_var('Y', 2, 2)]  # Station 3 ‚Üí Robot 3
    # ]

    # (1) R√†ng bu·ªôc ti·ªÅn nhi·ªám
    # j1 C·∫ßn l√†m tr∆∞·ªõc j2 => j2 kh√¥ng th·ªÉ ·ªü tr∆∞·ªõc j1
    for j1 in range(Na):
        for j2 in graph[j1]:
            for s2 in range(Nw):
                clause = [-get_var('X', j2, s2)]
                clause += [get_var('X', j1, s1) for s1 in range(s2 + 1)]
                clauses.append(clause)
    # (2) M·ªói c√¥ng vi·ªác ƒë∆∞·ª£c g√°n cho ƒë√∫ng m·ªôt tr·∫°m

    for j in range(Na):
        clauses.append([get_var('X', j, s) for s in range(Nw)])

    for j in range(Na):
        for s1 in range(Nw):
            for s2 in range(s1 + 1, Nw):
                clauses.append([-get_var('X', j, s1), -get_var('X', j, s2)])

    # (3) M·ªói tr·∫°m ƒë∆∞·ª£c g√°n cho ƒë√∫ng m·ªôt robot

    for s in range(Nw):
        clauses.append([get_var('Y', s, r) for r in range(Nr)])

    for s in range(Nw):
        for r1 in range(Nr):
            for r2 in range(r1 + 1, Nr):
                clauses.append([-get_var('Y', s, r1), -get_var('Y', s, r2)])
    #
    # (4) - (5) - (6)

    for j in range(Na):
        for s in range(Nw):
            for r in range(Nr):
                clauses.append([-get_var('X', j, s), -get_var('Y', s, r), get_var('Z', j, s, r)])
                clauses.append([-get_var('Z', j, s, r), get_var('X', j, s)])
                clauses.append([-get_var('Z', j, s, r), get_var('Y', s, r)])

    # (7) M·ªói c√¥ng vi·ªác ph·∫£i ƒë∆∞·ª£c kh·ªüi ƒë·ªông ƒë√∫ng m·ªôt l·∫ßn b·ªüi m·ªôt robot

    for j in range(Na):
        clauses.append([get_var('S', j, t) for t in range(CT)])

    for j in range(Na):
        for t1 in range(CT):
            for t2 in range(t1 + 1, time_end[j]):
                clauses.append([-get_var('S', j, t1), -get_var('S', j, t2)])

    # (8) Kh√¥ng kh·ªüi ƒë·ªông c√¥ng vi·ªác ngo√†i th·ªùi ƒëi·ªÉm cho ph√©p
    # C·∫£i ti·∫øn: g·ªôp l·∫°i v·ªõi (7)

    for j in range(Na):
        for r in range(Nr):
            for t in range(time_end[j] + 1, CT):
                clauses.append([-get_var('S', j, t)])
    #
    # (9) Kh√¥ng c√≥ hai c√¥ng vi·ªác ch·∫°y c√πng l√∫c t·∫°i c√πng m·ªôt tr·∫°m
    # C·∫£i ti·∫øn: t·∫°o m·ªôt t·∫≠p c√°c c√¥ng vi·ªác c√≥ th·ªÉ ƒë∆∞·ª£c g√°n v√†o s

    for s in range(Nw):
        for j1 in range(Na):
            for j2 in range(j1 + 1, Na):
                for t in range(CT):
                    clauses.append(
                        [-get_var('X', j1, s), -get_var('X', j2, s), -get_var('A', j1, s, t), -get_var('A', j2, s, t)])

    # (10) C√¥ng vi·ªác ƒë√£ kh·ªüi ƒë·ªông th√¨ ph·∫£i ·ªü tr·∫°ng th√°i ch·∫°y
    for j in range(Na):
        for s in range(Nw):
            for r in range(Nr):
                for t1 in range(0, time_end[j]):
                    # for t1 in range(0, CT):
                    for t2 in range(t1, min(t1 + T[j][r], CT)):
                        clauses.append([-get_var('S', j, t1), get_var('A', j, t2)])
    #
    # (11) N·∫øu c√πng tr·∫°m, c√¥ng vi·ªác i ph·∫£i ho√†n th√†nh tr∆∞·ªõc j
    # C·∫£i ti·∫øn: k·∫øt h·ª£p v·ªõi (9)
    for s in range(Nw):
        for j1 in range(Na):
            for j2 in graph[j1]:
                for t in range(CT):
                    clauses.append(
                        [-get_var('X', j1, s), -get_var('X', j2, s), -get_var('S', j1, t), -get_var('S', j2, t)])

        # (12) C·∫•m g√°n c√¥ng vi·ªác v√†o tr·∫°m kh√¥ng h·ª£p l·ªá do ti·ªÅn nhi·ªám
        # for j in range(Na):
        #     for s in range(Nw):
        #         if(ip[j][s]):
        #             clauses.append([-get_var('X', j, s)])

        # (13) Gi·ªõi h·∫°n th·ªùi gian chu k·ª≥ t·∫°i m·ªói tr·∫°m
        # for s in range(Nw):
        vars_ = []
        coeffs = []
        for j in range(Na):
            for r in range(Nr):
                vars_.append(get_var('Z', j, s, r))
                coeffs.append(T[j][r])

        # S·ª≠ d·ª•ng PBEnc ƒë·ªÉ t·∫°o CNF t·ª´ r√†ng bu·ªôc pseudo-boolean
        if vars_:  # Ch·ªâ th√™m constraint n·∫øu c√≥ variables
            cnf_part = PBEnc.leq(lits=vars_, weights=coeffs, bound=CT, vpool=var_manager)
            clauses.extend(cnf_part.clauses)

    # (14) Gi·ªõi h·∫°n nƒÉng l∆∞·ª£ng ti√™u th·ª•
    # for r in range(Nr):  # M·ªói robot
    #     clause = []
    #     coeffs = []
    #     for s in range(Nw):  # M·ªói tr·∫°m
    #         for j in range(Na):  # M·ªói c√¥ng vi·ªác
    #             coeffs.append(E[j][r])
    #             clauses.append(get_var('Z', j, s, r))
    #     # R√†ng bu·ªôc nƒÉng l∆∞·ª£ng <= Er[r]
    #     add_pseudo_boolean_constraint(clause, coeffs, "<=", Er[r])

    # (15) Lo·∫°i b·ªè nghi·ªám tr√πng l·∫∑p
    for sol in previous_solutions:
        clauses.append(sol)


def compute_ub_lb(T, Nw, Na):
    global LB, UB, Tjr_min_list, Tjr_max_list

    if not Tjr_min_list or not Tjr_max_list:  # Ki·ªÉm tra d·ªØ li·ªáu
        print("Warning: Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t√≠nh LB/UB")
        return

    n = math.ceil(Na / Nw)

    # S·∫Øp x·∫øp tƒÉng d·∫ßn / gi·∫£m d·∫ßn
    sorted_min = sorted(Tjr_min_list)  # d√πng cho LB
    sorted_max = sorted(Tjr_max_list, reverse=True)  # d√πng cho UB

    # T√≠nh LB: t·ªïng n gi√° tr·ªã nh·ªè nh·∫•t trong c√°c min_r T[j][r]
    # T√≠nh bounds
    LB = sum(sorted_min[:min(n, len(sorted_min))])
    UB = sum(sorted_max[:min(n, len(sorted_max))])

    # T√≠nh UB: t·ªïng (n+1) gi√° tr·ªã l·ªõn nh·∫•t trong c√°c max_r T[j][r]  # Comment
    print(f"LowerBound: {LB}")
    print(f"UpperBound: {UB}")


def Pre_processing():
    """
    Tr·∫£ v·ªÅ ip[j][s] = 1 n·∫øu task j KH√îNG ƒë∆∞·ª£c g√°n v√†o station s
    do kh√¥ng c√≤n ƒë·ªß s·ªë station ƒë·ªÉ g√°n c√°c task k·∫ø ti·∫øp (vi ph·∫°m precedence).

    Gi·∫£ s·ª≠ m·ªói station x·ª≠ l√Ω t·ªëi ƒëa n task, v·ªõi:
        n = ceil(Na / Nw)
    """
    global Na, Nw, graph
    ip = defaultdict(lambda: defaultdict(int))
    n = math.ceil(Na / Nw)

    for j in range(Na):
        for s in range(Nw):
            invalid = False
            successors = graph.get(j, [])

            if successors:
                min_station_needed = s + 1
                remaining_stations = max(0, Nw - min_station_needed)

                # N·∫øu s·ªë task k·∫ø ti·∫øp l·ªõn h∆°n t·ªïng s·ª©c ch·ª©a tr·∫°m c√≤n l·∫°i ‚Üí kh√¥ng th·ªÉ g√°n
                if remaining_stations * n < len(successors):
                    invalid = True
            ip[j][s] = int(invalid)

    return ip


def add_new_constraints():
    return


var_map = {}
var_counter = 1
var_manager = None  # S·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o trong optimize_ct()
clauses = []
Na = 0  # Na - jobs
Nw = 3  # Nw - workstations
Nr = 0  # Nr - robots
previous_solutions = []
T = defaultdict(dict)  # T[j][r] l√† th·ªùi gian robot r l√†m task j
graph = defaultdict(list)  # graph[j] l√† danh s√°ch c√°c task k·∫ø ti·∫øp c·ªßa task j
LB = int()
UB = int()
CT = int()  # cycletime
Tjr_min_list = []
Tjr_max_list = []
# time_end: th·ªùi gian kh·ªüi ƒë·ªông mu·ªôn nh·∫•t m√† v·∫´n k·ªãp ho√†n th√†nh c√¥ng vi·ªác
time_end = []
ip = []


def main():
    global Na, Nw, Nr, T, graph, LB, UB, CT, Tjr_min_list, Tjr_max_list, time_end, ip

    try:
        read_data("Dataset1.txt")
        ip = Pre_processing()
        # L·∫•y m·ªói task j: T[j][r] nh·ªè nh·∫•t v√† l·ªõn nh·∫•t
        Tjr_min_list = [min(T[j].values()) for j in T if T[j]]
        Tjr_max_list = [max(T[j].values()) for j in T if T[j]]
        compute_ub_lb(T, Nw, Na)
        optimize_ct()

    except FileNotFoundError:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file Dataset1.txt")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()